[gd_scene load_steps=13 format=3 uid="uid://i62xpj8dx48v"]

[sub_resource type="Shader" id="Shader_vp4xs"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME * 0.05;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	albedo_tex += ( texture(texture_albedo, vec3(-4, 0, -4).xy) * 0.5) / 2.0;
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(screen_texture, ref_ofs, ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="Gradient" id="Gradient_87put"]
colors = PackedColorArray(0.247225, 0.124719, 0.772799, 0.584314, 0.683538, 0.000278196, 0.6634, 0.513726)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_o7jo0"]
noise_type = 0
seed = 5
frequency = 0.0175
offset = Vector3(5, 0, 0)

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_c8q0q"]
width = 256
height = 256
invert = true
seamless = true
color_ramp = SubResource("Gradient_87put")
noise = SubResource("FastNoiseLite_o7jo0")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mais3"]
noise_type = 0
fractal_type = 3
fractal_ping_pong_strength = 5.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_phxkv"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mais3")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_qwyoy"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mais3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_4njbw"]
render_priority = 0
shader = SubResource("Shader_vp4xs")
shader_parameter/albedo = Color(0.694702, 0.49624, 0.229826, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.62
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = null
shader_parameter/normal_scale = 8.715
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_c8q0q")
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_qwyoy")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_phxkv")

[sub_resource type="BoxMesh" id="BoxMesh_hi6dx"]
material = SubResource("ShaderMaterial_4njbw")
size = Vector3(100, 1, 100)

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ecgeg"]
width = 256
height = 256
seamless = true
seamless_blend_skirt = 0.366
as_normal_map = true
color_ramp = SubResource("Gradient_87put")
noise = SubResource("FastNoiseLite_o7jo0")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kamx5"]
render_priority = 0
shader = SubResource("Shader_vp4xs")
shader_parameter/albedo = Color(0.9041, 0.295186, 0.327326, 0.670588)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.815
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.35
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.35
shader_parameter/refraction_texture_channel = null
shader_parameter/normal_scale = -0.383999
shader_parameter/uv1_blend_sharpness = 89.179
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_ecgeg")
shader_parameter/texture_roughness = SubResource("NoiseTexture2D_qwyoy")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_phxkv")

[sub_resource type="BoxMesh" id="BoxMesh_6tnmy"]
material = SubResource("ShaderMaterial_kamx5")
size = Vector3(100, 1, 100)

[node name="Node3D" type="Node3D"]

[node name="Sea" type="MeshInstance3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.030748, 0.379485, -2.83312)
visible = false
mesh = SubResource("BoxMesh_hi6dx")

[node name="Sea2" type="MeshInstance3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.030748, 0.379485, -2.83312)
mesh = SubResource("BoxMesh_6tnmy")
